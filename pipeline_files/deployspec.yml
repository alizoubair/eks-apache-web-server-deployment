version: 0.2

phases:
  install:
    runtime-versions:
      python: 3.8
    commands:
      - echo "Using pre-installed AWS CLI version:"
      - aws --version

      - echo "Check kubectl version"
      - kubectl version --client

      - echo "Installing Helm..."
      - curl https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3 | bash
      - helm version

  pre_build:
    commands:
      - echo Creating EKS access entry
      - |
        aws eks create-access-entry \
        --cluster-name $EKS_CLUSTER_NAME \
        --principal-arn $ASSUME_ROLE_ARN \
        --region $AWS_REGION || echo "Access entry might already exist"

      - |
        aws eks associate-access-policy \
          --cluster-name $EKS_CLUSTER_NAME \
          --principal-arn $ASSUME_ROLE_ARN \
          --policy-arn arn:aws:eks::aws:cluster-access-policy/AmazonEKSClusterAdminPolicy \
          --access-scope type=cluster \
          --region $AWS_REGION || echo "Access policy might already be attached"

      - echo "Authenticating with EKS..."
      - mkdir -p $HOME/.kube
      - aws eks update-kubeconfig --region $AWS_REGION --name $EKS_CLUSTER_NAME
      - kubectl cluster-info
      - kubectl get nodes

      # Generate token and store cluster info
      - echo "Generating EKS authentication token..."
      - export K8S_TOKEN=$(aws eks get-token --cluster-name $EKS_CLUSTER_NAME --region $AWS_REGION --output text --query 'status.token')

      - export K8S_CLUSTER_ENDPOINT=$(aws eks describe-cluster --region $AWS_REGION --name $EKS_CLUSTER_NAME --query "cluster.endpoint" --output text)
      - export K8S_CLUSTER_CA=$(aws eks describe-cluster --region $AWS_REGION --name $EKS_CLUSTER_NAME --query "cluster.certificateAuthority.data" --output text)

      # Generate kubeconfig manually to ensure CodeBuild can use it
      - |
        cat > $HOME/.kube/config <<EOF
        apiVersion: v1
        kind: Config
        clusters:
        - cluster:
            server: ${K8S_CLUSTER_ENDPOINT}
            certificate-authority-data: ${K8S_CLUSTER_CA}
          name: eks-cluster
        contexts:
        - context:
            cluster: eks-cluster
            user: eks-user
          name: eks-context
        current-context: eks-context
        users:
        - name: eks-user
          user:
            token: ${K8S_TOKEN}
        EOF

      - echo "Installing EBS CSI driver addon..."
      - aws eks create-addon --cluster-name $EKS_CLUSTER_NAME --addon-name aws-ebs-csi-driver --service-account-role-arn $CSI_DRIVER_ROLE_ARN --region $AWS_REGION || echo "EBS CSI driver addon already exists or failed to install"

  build:
    commands:
      - echo "Deploying Prometheus monitoring stack..."
      - helm repo add prometheus-community https://prometheus-community.github.io/helm-charts
      - helm repo update
      - helm upgrade --install monitoring prometheus-community/kube-prometheus-stack --namespace monitoring --create-namespace -f helm_charts/monitoring-values.yaml --timeout 10m

      - echo "Applying ADOT RBAC configuration..."
      - kubectl apply -f k8s-rbac/adot-rbac.yaml

      - echo "Deploying ADOT Collector..."
      - helm repo add open-telemetry https://open-telemetry.github.io/opentelemetry-helm-charts
      - helm repo update
      - helm upgrade --install adot-collector open-telemetry/opentelemetry-collector --namespace adot --create-namespace -f helm_charts/adot-values.yaml

      - echo "Deploying Apache web server..."
      - helm upgrade --install apache-web-server helm_charts/apache-web-server

  post_build:
    commands:
      - echo "All components deployed successfully."